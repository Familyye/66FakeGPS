package com.carlex.drive;
import android.content.Context;
import android.net.wifi.WifiManager;
import android.telephony.TelephonyManager;
import android.util.Log;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.firebase.iid.FirebaseInstanceId;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;
import android.location.LocationManager;
import android.bluetooth.BluetoothManager;
import android.hardware.SensorManager;
import android.net.ConnectivityManager;
import android.app.Activity;                           
import android.os.Bundle;                         
import android.util.Log;                  
import org.json.JSONObject;                                         
import org.json.XML;
import java.io.BufferedReader;                                            
import java.io.IOException;                                           
import java.io.InputStream;                                                
import java.io.InputStreamReader;


public class DriverInfo {

	
    private static final String TAG = "TelephonyValuesService";
    private Context context;
    private TelephonyManager telephonyManager;
    private WifiManager wifiManager;
    private LocationManager locationManager;
    private BluetoothManager bluetoothManager;
    private SensorManager sensorManager;
    private ConnectivityManager connectivityManager;
    public static String id;


    public DriverInfo(Context context, String id) {

        this.context = context;

	this.id = id;

        this.telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        this.wifiManager = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
	this.locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
	this.locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
	this.locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
	this.bluetoothManager = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);
	this.sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
	this.connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);


        saveToJsonFile();
	
    }

    private void saveToJsonFile() {
        JSONObject json = toJson();
        if (json != null) {
            try {
                FileOutputStream fos = context.openFileOutput(id + "_driver_settings.json", Context.MODE_PRIVATE);
                fos.write(json.toString().getBytes());
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
	}
    }

    public JSONObject toJson() {
        JSONObject json = new JSONObject();
        try {
            json.put("android.telephony.TelephonyManager", toJsonWithXposed(telephonyManager));
	    json.put("android.bluetooth.BluetoothManager", toJsonWithXposed(bluetoothManager));
        } catch (JSONException e) {
            e.printStackTrace();
	}
        return json;
    }

    private JSONObject toJsonWithXposed(Object object) {
        JSONObject json = new JSONObject();
        try {
            for (Method method : object.getClass().getDeclaredMethods()) {
                String name = method.getName();
                method.setAccessible(true); 
                    try {
                        Object value = method.invoke(object);
                            if (value instanceof List) {
                                json.put(name.substring(0), listToJson((List<?>) value));
                            } else {
				if (name.startsWith("get")){
					json.put(name.substring(0), value);
			    	} else {
			    	        json.put(name.substring(0), "x");
				}
			    }
			} catch (Exception e) {
                        	Log.e(TAG, "Erro ao invocar m√©todo " + name, e);
			}
            }
        } catch (Exception e) {
            Log.e(TAG, "Erro ao converter objeto para JSON", e);
        }
        return json;
    }

    private JSONArray listToJson(List<?> list) {
        JSONArray jsonArray = new JSONArray();
        for (Object item : list) {
            jsonArray.put(toJsonWithXposed(item));
        }
        return jsonArray;
    }

    



}

