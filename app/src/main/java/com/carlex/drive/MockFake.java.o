package com.carlex.drive;

import android.os.Bundle;

import java.util.Arrays;
import java.util.List;

import java.lang.reflect.InvocationTargetException;

import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XC_MethodReplacement;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;

public class MockFake implements IXposedHookLoadPackage {

    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
        hookLocationMethods(lpparam.classLoader);
        hookSettingsMethods(lpparam.classLoader);
    }

    private void hookLocationMethods(ClassLoader classLoader) {
        Class<?> locationClass = XposedHelpers.findClass("android.location.Location", classLoader);
        // Hooked android.location.Location isFromMockProvider()
        XposedHelpers.findAndHookMethod(locationClass, "isFromMockProvider", XC_MethodReplacement.returnConstant(false));
        // Hooked android.location.Location isMock()
        XposedHelpers.findAndHookMethod(locationClass, "isMock", XC_MethodReplacement.returnConstant(false));
        // Hooked android.location.Location setIsFromMockProvider()
        XposedHelpers.findAndHookMethod(locationClass, "setIsFromMockProvider", new XC_MethodHook() {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                Boolean isFromMockProvider = (Boolean) param.args[0];
                if (isFromMockProvider != null && isFromMockProvider) {
                    param.args[0] = false;
                }
            }
        });
        // Hooked android.location.Location setMock()
        XposedHelpers.findAndHookMethod(locationClass, "setMock", new XC_MethodHook() {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                Boolean mock = (Boolean) param.args[0];
                if (mock != null && mock) {
                    param.args[0] = false;
                }
            }
        });
        // Hooked android.location.Location getExtras()
        XposedHelpers.findAndHookMethod(locationClass, "getExtras", new XC_MethodReplacement() {
            @Override
            protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                Bundle extras = (Bundle) param.getResult();
                extras = getPatchedBundle(extras);
                return extras;
            }
        });
        // Hooked android.location.Location setExtras()
        XposedHelpers.findAndHookMethod(locationClass, "setExtras", new XC_MethodHook() {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                Bundle extras = (Bundle) param.args[0];
                param.args[0] = getPatchedBundle(extras);
            }
        });
        // Hooked android.location.Location set()
        XposedHelpers.findAndHookMethod(locationClass, "set", new XC_MethodHook() {
            final int HAS_MOCK_PROVIDER_MASK = XposedHelpers.getStaticIntField(locationClass, "HAS_MOCK_PROVIDER_MASK");

            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                int mFieldsMask = XposedHelpers.getIntField(param.thisObject, "mFieldsMask");
                mFieldsMask = mFieldsMask & ~HAS_MOCK_PROVIDER_MASK;
                XposedHelpers.setIntField(param.thisObject, "mFieldsMask", mFieldsMask);

                Bundle mExtras = (Bundle) XposedHelpers.getObjectField(param.thisObject, "mExtras");
                mExtras = getPatchedBundle(mExtras);
                XposedHelpers.setObjectField(param.thisObject, "mockLocation", mExtras);
            }
        });
    }

    private void hookSettingsMethods(ClassLoader classLoader) {
        // Hooked android.provider.Settings.* getStringForUser()
        String[] settingsClassNames = {
                "android.provider.Settings.Secure",
                "android.provider.Settings.System",
                "android.provider.Settings.Global",
                "android.provider.Settings.NameValueCache"
        };
        for (String className : settingsClassNames) {
            Class<?> clazz = XposedHelpers.findClass(className, classLoader);
            XposedHelpers.findAndHookMethod(clazz, "getStringForUser", new XC_MethodReplacement() {
                @Override
                protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                    String name = (String) param.args[1];
                    if ("mock_location".equals(name)) {
                        return "0";
                    }
                    return param.getResult();
                }
            });
        }
    }

    /**
     * if "mockLocation" containsKey in the given bundle, set it to false
     *
     * @param origBundle original Bundle object
     * @return Bundle with "mockLocation" set to false
     */
    private Bundle getPatchedBundle(Bundle origBundle) {
        if (origBundle != null && origBundle.containsKey("mockLocation")) {
            origBundle.putBoolean("mockLocation", false);
        }
        return origBundle;
    }

    public static class XposedUtils {
	public static Object invokeOriginalMethod(XC_MethodHook.MethodHookParam param) {
    try {
        return XposedBridge.invokeOriginalMethod(param.method, param.thisObject, param.args);
    } catch (IllegalAccessException e) {
        // Tratamento da exceção IllegalAccessException
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        // Tratamento da exceção InvocationTargetException
        e.printStackTrace();
    }
    return null;
}


    }

}

