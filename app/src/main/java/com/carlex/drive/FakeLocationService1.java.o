package com.carlex.drive;

import android.Manifest;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.location.GpsSatellite;         
import android.location.GnssStatus;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationManager;
import android.os.Build;
import android.os.IBinder;
import android.os.SystemClock;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import android.util.Log;
import java.util.concurrent.ThreadLocalRandom;
import java.io.*;
import java.util.*;
import org.json.JSONArray;
import org.json.JSONObject;
import android.os.Bundle;

public class FakeLocationService1 extends Service {
    public double latitude, longitude, altitude;
    public float bearing;
    public double velocidade;
    private SpaceMan spaceMan;
    public static final String TAG = "FakeLocationService";
    public static boolean isRunning = false;
    public static boolean parado = true;
    public Thread backgroundThread;
    public static boolean processado;
    public FusedLocationsProvider fusedLocationsProvider;
    public static xLocationManager locationManager;
    public static Context context;
    private static final String CHANNEL_ID = "FakeLocationServiceChannel";
    public String xtles;
    public static Location xfakeLocation;
    public static Location fusedlocation;
    public static Location netlocation;
    public static Location gpslocation;
    public static ArrayList<SpaceMan.MyGpsSatellite> mygps = new ArrayList<>();

    private GNSSManager gnssManager;

    private boolean devAlmanacAlwaysFalse = true;     
    private boolean devEphemerisAlwaysFalse = true;      
    private boolean devFixAlwaysFalse = true;            
    private boolean devGpsOnly = true;

    private float fixDropRate = 0.1f;                
    private Random rand = new Random();             
    private boolean simulateNoise = true;


	    @Override
    public void onCreate() {
        //super.onCreate();
	context = MainActivity.mainApp.getApplicationContext();	
	xtles = readRawTextFile(R.raw.gps);
	context =  getApplicationContext();
        locationManager = xLocationManager.getInstance(MainActivity.mainApp);
        createNotificationChannel();
        startForeground(1, getNotification("66 Fake Gps Ligado").build());
	isRunning = true;
	latitude = locationManager.getLatitude();
        longitude = locationManager.getLongitude();
        altitude = locationManager.getAltitude();
        bearing = locationManager.getBearing();
        fusedLocationsProvider = new FusedLocationsProvider(this);
        xLocationManager.initTestProvider(this);
        locationManager = xLocationManager.getInstance(this);
	//gnssManager = new GNSSManager(this);
    }


    public static boolean isServiceRunning() {
        return isRunning;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        new Thread(() -> {

	    //iniciar servico loop infinito
            while (true) {

		

                //Limpaar dados antigos
		MyApp.getDatabase().rotaFakeDao().deleteRotaFakeWithTimeGreaterThan(System.currentTimeMillis());
                RotaFake rotaFake1 = MyApp.getDatabase().rotaFakeDao().getRotaFakeWithMinTime(System.currentTimeMillis());

		//Verificar se o veículo está parado
		if (locationManager.getSpeed()>0.5 && parado == true){   
			if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED) { NotificationManagerCompat.from(this).notify(2, getNotification("66 em Rota").build()); }              
			parado = false;                  
		} 

		if (locationManager.getSpeed()<=0.5 && parado == false){
			if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED) { NotificationManagerCompat.from(this).notify(2, getNotification("66 Estacionado").build()); }            
			parado = true;                        
		}

		//iniciar o processo de spoofing
		if (rotaFake1 != null) {
		    gpslocation = spoofLocation(rotaFake1, LocationManager.GPS_PROVIDER);
		       gpslocation.setExtras(createExtrasBundle());
		    netlocation = spoofLocation(rotaFake1, LocationManager.NETWORK_PROVIDER);
		    fusedlocation = spoofLocation(rotaFake1, "fused");

                    //simular provedores localizacao
		    if (latitude < -10.0) {
                        locationManager.setGpsProvider(gpslocation);
			fusedLocationsProvider.spoof(fusedlocation);
			locationManager.setNetworkProvider(netlocation);
			//xfakeLocation = gpslocation;
                    }

		    //esperar tempo para proxima atualizacao
                    long tempo = rotaFake1.getTempo();
                    long diferencaTempo = tempo - System.currentTimeMillis();
		    if (diferencaTempo > 0) {
			    try {Thread.sleep(diferencaTempo);} 
			    catch (InterruptedException e) {}
                    }
                } else {

			//spoofing estacionado
			if (latitude < -10.0){             
			    RotaFake rotaFakeEntry = new RotaFake(latitude, longitude, bearing, 0.0, (long) (System.currentTimeMillis() + 100));
			    MyApp.getDatabase().rotaFakeDao().insert(rotaFakeEntry);
		    	} 
			
			//esperar 0.1s para proxima atualizacao
			try {Thread.sleep((long) 50); }   
			catch (InterruptedException e) {}         
		}                                    

		//limpar pontos antigos
		MyApp.getDatabase().rotaFakeDao().deleteRotaFakeWithTimeGreaterThan(System.currentTimeMillis()); 
		//fim while
	    }

	//fim thread
	}).start();

	//nao reiniciar 
	return START_NOT_STICKY;
    }
    


    private Bundle createExtrasBundle() {
	GnssStatus gnssStatus = GNSSStatusHolder.getGnssStatus();

	if (gnssStatus == null) {            
		return null;                    
	}

	NmeaGenerator nmeaGenerator = new NmeaGenerator(gpslocation, gnssStatus);
        String nmeaMessage = nmeaGenerator.generateNmeaMessage();

	int satellites = gnssStatus.getSatelliteCount();
        Bundle bundle = new Bundle();
        bundle.putInt("satellites", satellites); 
        bundle.putString("nmea", nmeaMessage); 
        return bundle;
	
    }

	
    //criar localizacao spoofada
    public Location spoofLocation(RotaFake rotaFake1, String provider) {
	    latitude = rotaFake1.getLatitude();   
	    longitude = rotaFake1.getLongitude();       
	    bearing = rotaFake1.getBearing();        
	    bearing = (float) ((bearing + 180.0) % 360.0 - 180.0);
	    velocidade = rotaFake1.getVelocidade();                                                                                  
	    Location gpsLocation = new Location(provider);
	    float noise = (float) (ThreadLocalRandom.current().nextDouble(0, 20)/10);   
	    long Timef = System.currentTimeMillis();              
	    gpsLocation.setLatitude(latitude);                
	    gpsLocation.setLongitude(longitude);            
	    gpsLocation.setBearing(bearing+(noise/2));         
	    gpsLocation.setSpeed((float) ((velocidade+(noise/3.6f))/4));
	    gpsLocation.setTime(Timef);                         
	    gpsLocation.setAltitude((double) ((700 + Math.random() * 50)+noise));
	    gpsLocation.setAccuracy((float) (ThreadLocalRandom.current().nextDouble(0, 20)/10));                                                       
	    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
		    gpsLocation.setVerticalAccuracyMeters((float) (ThreadLocalRandom.current().nextDouble(0, 20)/10));            
		    gpsLocation.setSpeedAccuracyMetersPerSecond(noise/3.6f);
		    gpsLocation.setBearingAccuracyDegrees(noise/2);
	    }

	    gpsLocation.setElapsedRealtimeNanos(SystemClock.elapsedRealtimeNanos());
	    return gpsLocation;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
	isRunning = false;
        stopForeground(true);
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED) {
            NotificationManagerCompat.from(this).notify(2, getNotification("Fake Location Service Stopped").build());
        } 
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

/*
private void xcell() {                                               
	JSONObject jsonResponse;
        double lat1 = 0.0, lon1 = 0.0, alt1 = 0.0;                                                   
		lat1 = latitude;
		lon1 = longitude;            
		alt1 = altitude;                                            
	jsonResponse =  Cellinfo.Cellinfo(lat1, lon1);             
}                                                                                              					  
*/

//public void xgnss(){                   
//	spaceMan = new SpaceMan(tles, xlocation, this);
//}


    private String readRawTextFile(int resId) {
        InputStream inputStream = getResources().openRawResource(resId);
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        StringBuilder sb = new StringBuilder();
        String line;
        try {
            while ((line = bufferedReader.readLine()) != null) {
                sb.append(line).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                inputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }

    private NotificationCompat.Builder getNotification(String message) {
        return new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Fake Location Service")
                .setContentText(message)
                .setSmallIcon(R.drawable.ico)
                .setPriority(NotificationCompat.PRIORITY_DEFAULT);
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            CharSequence name = "Fake Location Service Channel";
            String description = "Channel for Fake Location Service";
            int importance = NotificationManager.IMPORTANCE_DEFAULT;
            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);
            channel.setDescription(description);
            NotificationManager notificationManager = getSystemService(NotificationManager.class);
            notificationManager.createNotificationChannel(channel);
        }
    }


}
