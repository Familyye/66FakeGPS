<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.4.0">

    <issue
        id="LintBaseline"
        severity="Information"
        message="41 warnings were filtered out because they are listed in the baseline file, lint-baseline.xml"
        category="Lint"
        priority="10"
        summary="Baseline Applied"
        explanation="Lint can be configured with a &quot;baseline&quot;; a set of current issues found in a codebase, which future runs of lint will silently ignore. Only new issues not found in the baseline are reported.&#xA;&#xA;Note that while opening files in the IDE, baseline issues are not filtered out; the purpose of baselines is to allow you to get started using lint and break the build on all newly introduced errors, without having to go back and fix the entire codebase up front. However, when you open up existing files you still want to be aware of and fix issues as you come across them.&#xA;&#xA;This issue type is used to emit an informational-only warning if any issues were filtered out due to baseline matching. That way, you don&apos;t have a false sense of security if you forgot that you&apos;ve checked in a baseline file.">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/lint-baseline.xml"/>
    </issue>

    <issue
        id="LintBaselineFixed"
        severity="Information"
        message="15 errors/warnings were listed in the baseline file (lint-baseline.xml) but not found in the project; perhaps they have been fixed? Another possible explanation is that lint recently stopped analyzing (and including results from) dependent projects by default. You can turn this back on with `android.lintOptions.checkDependencies=true`. Unmatched issue types: DefaultLocale (6), GradleDependency, HardcodedText (2), IconDuplicatesConfig (5), InlinedApi (4), SuspiciousIndentation (2)"
        category="Lint"
        priority="10"
        summary="Baselined Issues Fixed"
        explanation="If a lint baseline describes a problem which is no longer reported, then the problem has either been fixed, or perhaps the issue type has been disabled. In any case, the entry can be removed from the baseline (such that if the issue is reintroduced at some point, lint will complain rather than just silently starting to match the old baseline entry again.)">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/lint-baseline.xml"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 26 (current min is 24): `android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="                WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java"
            line="56"
            column="17"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 31 (current min is 24): `android.location.provider.ProviderProperties#ACCURACY_FINE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="     androidLocationManager.addTestProvider(GPS_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_FINE);"
        errorLine2="                                                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="154"
            column="140"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 31 (current min is 24): `android.location.provider.ProviderProperties#POWER_USAGE_LOW`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="     androidLocationManager.addTestProvider(GPS_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_FINE);"
        errorLine2="                                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="154"
            column="104"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 31 (current min is 24): `android.location.provider.ProviderProperties#ACCURACY_COARSE`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="     androidLocationManager.addTestProvider(NETWORK_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_COARSE);"
        errorLine2="                                                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="157"
            column="144"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 31 (current min is 24): `android.location.provider.ProviderProperties#POWER_USAGE_LOW`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="     androidLocationManager.addTestProvider(NETWORK_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_COARSE);"
        errorLine2="                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="157"
            column="108"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1="     XposedHelpers.findAndHookMethod("
        errorLine2="~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationModule.java"
            line="150"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationModule.java"
            line="78"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" isRunning = true;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="45"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="43"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1="   fusedLocationsProvider.spoof(fusedLocation);"
        errorLine2="~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="93"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="92"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" return START_NOT_STICKY;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="126"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="64"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" isRunning = false;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="159"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java"
            line="158"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" xthis = context;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java"
            line="31"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java"
            line="30"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1="     sToast(&quot;FALHA AO AUTORIZAR FAKE FUSED&quot;);"
        errorLine2="~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java"
            line="105"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java"
            line="104"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1="  center = bounds.getCenter();"
        errorLine2="~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1158"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1156"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" if (polyline != null) {      "
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1206"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1179"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1="  checkloc.setChecked(false);"
        errorLine2="~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1381"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1380"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" saveTurboValue(turbo);"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1441"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1440"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" params.gravity = Gravity.BOTTOM | Gravity.RIGHT;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java"
            line="59"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java"
            line="53"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1="  return true;"
        errorLine2="~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/VerifyLocationTask.java"
            line="27"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/VerifyLocationTask.java"
            line="25"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" xthis = context;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="48"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="47"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="SuspiciousIndentation"
        severity="Warning"
        message="The indentation string here is different from on the previous line (`&quot; &quot;` vs `\t`)"
        category="Correctness"
        priority="6"
        summary="Suspicious indentation"
        explanation="This check looks for cases where the indentation suggests a grouping that isn&apos;t actually there in the code. A common example of this would be something like&#xA;```kotlin&#xA;if (column > width)&#xA;    line++&#xA;    column = 0&#xA;```&#xA;Here, the `column = 0` line will be executed every single time, not just if the condition is true."
        errorLine1=" isMockLocationsEnabled=true;"
        errorLine2="~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="150"
            column="1"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="149"
            column="1"
            message="Previous line indentation here"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/"
        urls="https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/"
        errorLine1="        overlayView = LayoutInflater.from(this).inflate(R.layout.overlay_layout, null);"
        errorLine2="                                                                                 ~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java"
            line="46"
            column="82"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.android.gms:play-services-location than 21.2.0 is available: 21.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.google.android.gms:play-services-location:21.2.0&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle"
            line="50"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;androidx.appcompat:appcompat:1.6.1&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle"
            line="54"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.annotation:annotation-experimental than 1.4.0 is available: 1.4.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;androidx.annotation:annotation-experimental:1.4.0&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle"
            line="59"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.appcompat:appcompat than 1.4.1 is available: 1.7.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;androidx.appcompat:appcompat:1.4.1&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle"
            line="62"
            column="20"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.android.material:material than 1.7.0 is available: 1.12.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.google.android.material:material:1.7.0&apos;"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle"
            line="75"
            column="20"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 24"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1402"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    public static Context xthis;"
        errorLine2="           ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java"
            line="27"
            column="12"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This `AsyncTask` class should be static or leaks might occur (anonymous android.os.AsyncTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        new AsyncTask&lt;Void, Void, Void>() {"
        errorLine2="        ^">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/Iniciar.java"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static TextView tbear;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="100"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static TextView tspeed;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="101"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static TextView talti;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="102"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static Switch checkloc;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="118"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static Switch checkfake;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="119"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static Button gerarRotaButton;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="134"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static Button puloButton;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="135"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static SeekBar turboSeekBar;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="137"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static TextView textViewTempo;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="142"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static TextView textViewveloMed;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="144"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `xLocationManager` which has field `context` pointing to `Context`); this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static xLocationManager locationManager;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="160"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static Context mainApp;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="165"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static Context context;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="166"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="public static ImageView fundo;"
        errorLine2="       ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="174"
            column="8"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This `AsyncTask` class should be static or leaks might occur (anonymous android.os.AsyncTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    new AsyncTask&lt;Void, Void, String>() {"
        errorLine2="    ^">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="841"
            column="5"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This `AsyncTask` class should be static or leaks might occur (anonymous android.os.AsyncTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        new AsyncTask&lt;Void, Void, RotaFake>() {"
        errorLine2="        ^">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1179"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="This field leaks a context object"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private final MainActivity mainActivity;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/VerifyLocationTask.java"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `xLocationManager` which has field `context` pointing to `Context`); this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static xLocationManager instance;"
        errorLine2="            ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="33"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Context xthis;"
        errorLine2="            ~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/fundo.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="https://developer.android.com/guide/practices/screens_support.html"
        urls="https://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable/fundo.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: ico.png, ico.png, ico.png, ico.png, fundo.png, ico.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable/ico.png"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable/fundo.png"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable-xxhdpi/ico.png"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable-xhdpi/ico.png"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable-mdpi/ico.png"/>
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable-hdpi/ico.png"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="            public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                           ~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java"
            line="188"
            column="28"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1=" &lt;ImageView"
        errorLine2="  ~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml"
            line="7"
            column="3"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="String literal in `setText` can not be translated. Use Android resources instead."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="   textViewTempo.setText(&quot;🏁 00:00:00&quot;);"
        errorLine2="                         ~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java"
            line="1201"
            column="26"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;bear&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;bear&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml"
            line="48"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;🏁 00:00:00&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;🏁 00:00:00&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml"
            line="94"
            column="33"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1=" params.gravity = Gravity.BOTTOM | Gravity.RIGHT;"
        errorLine2="                                           ~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java"
            line="59"
            column="44"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;5.0dp&quot;` to better support right-to-left layouts"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1=" android:layout_marginLeft=&quot;5.0dp&quot;  "
        errorLine2=" ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/overlay_layout.xml"
            line="10"
            column="2"/>
    </issue>

</issues>
