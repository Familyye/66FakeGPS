/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/lint-baseline.xml: Information: 40 warnings were filtered out because they are listed in the baseline file, lint-baseline.xml [LintBaseline]
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/lint-baseline.xml: Information: 16 errors/warnings were listed in the baseline file (lint-baseline.xml) but not found in the project; perhaps they have been fixed? Another possible explanation is that lint recently stopped analyzing (and including results from) dependent projects by default. You can turn this back on with android.lintOptions.checkDependencies=true. Unmatched issue types: DefaultLocale (6), GradleDependency, HardcodedText (3), IconDuplicatesConfig (5), InlinedApi (4), SuspiciousIndentation (2) [LintBaselineFixed]

   Explanation for issues of type "LintBaselineFixed":
   If a lint baseline describes a problem which is no longer reported, then
   the problem has either been fixed, or perhaps the issue type has been
   disabled. In any case, the entry can be removed from the baseline (such
   that if the issue is reintroduced at some point, lint will complain rather
   than just silently starting to match the old baseline entry again.)

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app: Information: Check failed with exception: java.lang.NoSuchMethodException: com.android.tools.lint.detector.api.LintModelModuleProject.getGradleProjectModel() [IidCompatibilityCheckFailure from firebase-installations-16.3.3]
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app: Information: Check failed with exception: java.lang.NoSuchMethodException: com.android.tools.lint.detector.api.LintModelModuleProject.getGradleProjectModel() [IidCompatibilityCheckFailure from firebase-installations-16.3.3]
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app: Information: Check failed with exception: java.lang.NoSuchMethodException: com.android.tools.lint.detector.api.LintModelModuleProject.getGradleProjectModel() [IidCompatibilityCheckFailure from firebase-installations-16.3.3]

   Explanation for issues of type "IidCompatibilityCheckFailure":
   The check failed to run as it encountered unknown failure.
   This is most likely caused by a new version of Android Gradle Plugin that
   this check does not support.
   Please make sure your build does not depend on firebase-iid version earlier
   than 20.1.1 as it will cause issues.

   Vendor: Google (firebase-installations-16.3.3)
   Identifier: firebase-installations-16.3.3

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:76: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
   gpsLocation = locationManager.getLastKnownLocation(GPS_PROVIDER);  
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:97: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
 gpsLocation = locationManager.getLastKnownLocation(GPS_PROVIDER);
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:98: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
 networkLocation = locationManager.getLastKnownLocation(NETWORK_PROVIDER);
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/GNSSManager.java:37: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
            locationManager.registerGnssStatusCallback(gnssStatusCallback);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/GpsGnss.java:107: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
            locationManager.registerGnssStatusCallback(gnssCallback);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Main.java:64: Error: Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with checkPermission) or explicitly handle a potential SecurityException [MissingPermission]
        fusedLocationClient.getLastLocation()
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "MissingPermission":
   This check scans through your code and libraries and looks at the APIs
   being used, and checks this against the set of permissions required to
   access those APIs. If the code using those APIs is called at runtime, then
   the program will crash.

   Furthermore, for permissions that are revocable (with targetSdkVersion 23),
   client code must also be prepared to handle the calls throwing an exception
   if the user rejects the request for permission at runtime.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/AndroidManifest.xml:15: Error: Mock locations should only be requested in a test or debug-specific manifest file (typically src/debug/AndroidManifest.xml) [MockLocation]
    <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION"/>
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "MockLocation":
   Using a mock location provider (by requiring the permission
   android.permission.ACCESS_MOCK_LOCATION) should only be done in debug
   builds (or from tests). In Gradle projects, that means you should only
   request this permission in a test or debug source set specific manifest
   file.

   To fix this, create a new manifest file in the debug folder and move the
   <uses-permission> element there. A typical path to a debug manifest
   override file in a Gradle project is src/debug/AndroidManifest.xml.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/gnssmain.xml:18: Warning: Attribute android:editable should not be used with <TextView>: Change element type to <EditText> ? [TextViewEdits]
            android:editable="true"
            ~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/gnssmain.xml:19: Warning: Attribute android:inputType should not be used with <TextView>: Change element type to <EditText> ? [TextViewEdits]
            android:inputType="textMultiLine"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "TextViewEdits":
   Using a <TextView> to input text is generally an error, you should be using
   <EditText> instead.  EditText is a subclass of TextView, and some of the
   editing support is provided by TextView, so it's possible to set some
   input-related properties on a TextView. However, using a TextView along
   with input attributes is usually a cut & paste error. To input text you
   should be using <EditText>.

   This check also checks subclasses of TextView, such as Button and CheckBox,
   since these have the same issue: they should not be used with editable
   attributes.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgga.java:34: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        String nmeaOutput = String.format("%s,%s.00,%s,%s,%s,%s,%d,%02d,%.2f,%.1f,M,%.1f,M,%s,%s",
                            ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgsa.java:39: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        String nmeaOutput = String.format("%s,%s,%d,%s,%.2f,%.2f,%.2f",
                            ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgsv.java:28: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        String nmeaOutput = String.format("%s,%d,%d,%d%s",
                            ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/GpgsvGroup.java:16: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
            this.satsIds.add(String.format("%02d", i));
                             ~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gphdt.java:13: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        String nmeaOutput = String.format("%s,%.2f,T", SENTENCE_ID, heading);
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gprmc.java:34: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        String nmeaOutput = String.format("%s,%s.000,%s,%s,%s,%s,%s,%.3f,%.2f,%s,%s,%s,%s",
                            ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpvtg.java:22: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
   .add(String.format("%.2f,T", headingTrue))
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpvtg.java:24: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
   .add(String.format("%.2f,N", sogKnots))
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpvtg.java:25: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
   .add(String.format("%.2f,K", getSogKmhr()))
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/NmeaMsg.java:55: Warning: Implicitly using the default locale is a common source of bugs: Use toUpperCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault(). [DefaultLocale]
        String hexStr = Integer.toHexString(checkSum).toUpperCase();
                                                      ~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Position.java:40: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        return new String[] {String.format("%02d%06.3f", graus, minutosDecimal), Character.toString(direcao)};
                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Position.java:47: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        return String.format("%03d° %06.3f' %c", graus, minutosDecimal, direcao);
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Position.java:55: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
        return String.format("%03d° %06.3f' %c", graus, minutosDecimal, direcao);
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.ROOT) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:233: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#ACCURACY_FINE [InlinedApi]
     locationManager.addTestProvider(GPS_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_FINE);                      
                                                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:233: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#POWER_USAGE_LOW [InlinedApi]
     locationManager.addTestProvider(GPS_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_FINE);                      
                                                                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:235: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#ACCURACY_COARSE [InlinedApi]
     locationManager.addTestProvider(NETWORK_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_COARSE);                   
                                                                                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:235: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#POWER_USAGE_LOW [InlinedApi]
     locationManager.addTestProvider(NETWORK_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_COARSE);                   
                                                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java:36: Warning: Field requires API level 26 (current min is 24): android.view.WindowManager.LayoutParams#TYPE_APPLICATION_OVERLAY [InlinedApi]
                WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:154: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#ACCURACY_FINE [InlinedApi]
     androidLocationManager.addTestProvider(GPS_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_FINE);
                                                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:154: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#POWER_USAGE_LOW [InlinedApi]
     androidLocationManager.addTestProvider(GPS_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_FINE);
                                                                                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:157: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#ACCURACY_COARSE [InlinedApi]
     androidLocationManager.addTestProvider(NETWORK_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_COARSE);
                                                                                                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:157: Warning: Field requires API level 31 (current min is 24): android.location.provider.ProviderProperties#POWER_USAGE_LOW [InlinedApi]
     androidLocationManager.addTestProvider(NETWORK_PROVIDER,false, false, false, false, true, true, true, ProviderProperties.POWER_USAGE_LOW, ProviderProperties.ACCURACY_COARSE);
                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "InlinedApi":
   This check scans through all the Android API field references in the
   application and flags certain constants, such as static final integers and
   Strings, which were introduced in later versions. These will actually be
   copied into the class files rather than being referenced, which means that
   the value is available even when running on older devices. In some cases
   that's fine, and in other cases it can result in a runtime crash or
   incorrect behavior. It depends on the context, so consider the code
   carefully and decide whether it's safe and can be suppressed or whether the
   code needs to be guarded.

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgga.java:21: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#format [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                   ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgga.java:21: Error: Call requires API level 26 (current min is 24): java.time.format.DateTimeFormatter#ofPattern [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                                            ~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgll.java:15: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#format [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                   ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpgll.java:15: Error: Call requires API level 26 (current min is 24): java.time.format.DateTimeFormatter#ofPattern [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                                            ~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gprmc.java:20: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#format [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                   ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gprmc.java:20: Error: Call requires API level 26 (current min is 24): java.time.format.DateTimeFormatter#ofPattern [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                                            ~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gprmc.java:21: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#format [NewApi]
        this.utcDate = utcDateTime.format(DateTimeFormatter.ofPattern("ddMMyy"));
                                   ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gprmc.java:21: Error: Call requires API level 26 (current min is 24): java.time.format.DateTimeFormatter#ofPattern [NewApi]
        this.utcDate = utcDateTime.format(DateTimeFormatter.ofPattern("ddMMyy"));
                                                            ~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpzda.java:12: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#format [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                   ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpzda.java:12: Error: Call requires API level 26 (current min is 24): java.time.format.DateTimeFormatter#ofPattern [NewApi]
        this.utcTime = utcDateTime.format(DateTimeFormatter.ofPattern("HHmmss"));
                                                            ~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpzda.java:13: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#format [NewApi]
        this.utcDate = utcDateTime.format(DateTimeFormatter.ofPattern("dd,MM,yyyy"));
                                   ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/Gpzda.java:13: Error: Call requires API level 26 (current min is 24): java.time.format.DateTimeFormatter#ofPattern [NewApi]
        this.utcDate = utcDateTime.format(DateTimeFormatter.ofPattern("dd,MM,yyyy"));
                                                            ~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/gnssData/NmeaMsg.java:25: Error: Call requires API level 26 (current min is 24): java.time.LocalDateTime#now [NewApi]
        this.utcDateTime = LocalDateTime.now();
                                         ~~~

   Explanation for issues of type "NewApi":
   This check scans through all the Android API calls in the application and
   warns about any calls that are not available on all versions targeted by
   this application (according to its minimum SDK attribute in the manifest).

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

   If you are deliberately setting android: attributes in style definitions,
   make sure you place this in a values-vNN folder in order to avoid running
   into runtime conflicts on certain devices where manufacturers have added
   custom attributes whose ids conflict with the new ones on later platforms.

   Similarly, you can use tools:targetApi="11" in an XML file to indicate that
   the element will only be inflated in an adequate context.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:20: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdkVersion 33
        ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:63: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 this.locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:61: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:187: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 return START_NOT_STICKY;
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:128: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:263: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 isRunning = false;
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FakeLocationService1.java:262: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java:33: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 xthis = context;
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java:32: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java:111: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
     Log.d("fused", "FALHA AO AUTORIZAR FAKE FUSED");
~~~~~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java:110: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/Main.java:97: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
     Log.d("GpsGnss", "GpsGnss loaded");
~~~~~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/Main.java:96: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1254: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 nfreio = Math.max(0.0, nfreio - 0.01); 
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1253: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1431: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
  center = bounds.getCenter();
~~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1429: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1528: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 if (polyline != null) {      
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1501: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1703: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
  checkloc.setChecked(false);
~~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1702: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1763: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 saveTurboValue(turbo);
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1762: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/VerifyLocationTask.java:27: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
  return true;
~~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/VerifyLocationTask.java:25: Previous line indentation here
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:48: Warning: The indentation string here is different from on the previous line (" " vs \t) [SuspiciousIndentation]
 xthis = context;
~
    /data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:47: Previous line indentation here

   Explanation for issues of type "SuspiciousIndentation":
   This check looks for cases where the indentation suggests a grouping that
   isn't actually there in the code. A common example of this would be
   something like
   if (column > width)
       line++
       column = 0
   Here, the column = 0 line will be executed every single time, not just if
   the condition is true.

   Available options:

   **always-run** (default is false):
   Whether this check should be included while editing.

   While you're editing, it's common to have a temporary situation where you have suspicious indentation scenarios -- e.g. you start typing an `if` statement on the line above something you want to make conditional, and you haven't indented it yet. It can be distracting and misleading to suddenly have both statements light up as errors. Therefore, lint will avoid including this check when running on the fly in the editor, unless it looks like the file has not been recently edited. With this option, you can turn it on in all cases.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="SuspiciousIndentation">
           <option name="always-run" value="false" />
       </issue>
   </lint>
   ```

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/AndroidManifest.xml:15: Error: Permission is only granted to system apps [ProtectedPermissions]
    <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION"/>
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ProtectedPermissions":
   Permissions with the protection level signature, privileged or
   signatureOrSystem are only granted to system apps. If an app is a regular
   non-system app, it will never be able to use these permissions.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:81: Warning: A newer version of com.google.android.gms:play-services-location than 21.2.0 is available: 21.3.0 [GradleDependency]
    implementation 'com.google.android.gms:play-services-location:21.2.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:85: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.0 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:88: Warning: A newer version of androidx.core:core than 1.12.0 is available: 1.13.1 [GradleDependency]
    implementation 'androidx.core:core:1.12.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:89: Warning: A newer version of androidx.core:core-ktx than 1.12.0 is available: 1.13.1 [GradleDependency]
    implementation 'androidx.core:core-ktx:1.12.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:90: Warning: A newer version of androidx.annotation:annotation-experimental than 1.4.0 is available: 1.4.1 [GradleDependency]
    implementation 'androidx.annotation:annotation-experimental:1.4.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:95: Warning: A newer version of com.google.android.gms:play-services-ads-identifier than 17.0.0 is available: 18.1.0 [GradleDependency]
    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:98: Warning: A newer version of com.google.firebase:firebase-messaging than 20.2.4 is available: 24.0.0 [GradleDependency]
    implementation 'com.google.firebase:firebase-messaging:20.2.4'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:102: Warning: A newer version of androidx.appcompat:appcompat than 1.4.1 is available: 1.7.0 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.4.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:115: Warning: A newer version of com.google.android.material:material than 1.7.0 is available: 1.12.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.7.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/gnssmain.xml:18: Warning: android:editable is deprecated: Use an <EditText> to make it editable [Deprecated]
            android:editable="true"
            ~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Deprecated":
   Deprecated views, attributes and so on are deprecated because there is a
   better way to do something. Do it that new way. You've been warned.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/GNSSManager.java:14: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
    @RequiresApi(api = Build.VERSION_CODES.N)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1724: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/FusedLocationsProvider.java:27: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
    public static Context xthis;
           ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/Iniciar.java:16: Warning: This AsyncTask class should be static or leaks might occur (anonymous android.os.AsyncTask) [StaticFieldLeak]
        new AsyncTask<Void, Void, Void>() {
        ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:137: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static TextView tbear;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:138: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static TextView tspeed;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:139: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static TextView talti;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:155: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static Switch checkloc;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:156: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static Switch checkfake;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:171: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static Button gerarRotaButton;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:172: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static Button puloButton;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:174: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static SeekBar turboSeekBar;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:182: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static TextView textViewTempo;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:184: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static TextView textViewveloMed;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:200: Warning: Do not place Android context classes in static fields (static reference to xLocationManager which has field context pointing to Context); this is a memory leak [StaticFieldLeak]
public static xLocationManager locationManager;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:205: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static Context mainApp;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:206: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static Context context;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:214: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
public static ImageView fundo;
       ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1076: Warning: This AsyncTask class should be static or leaks might occur (anonymous android.os.AsyncTask) [StaticFieldLeak]
    new AsyncTask<Void, Void, String>() {
    ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1501: Warning: This AsyncTask class should be static or leaks might occur (anonymous android.os.AsyncTask) [StaticFieldLeak]
        new AsyncTask<Void, Void, RotaFake>() {
        ^
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/VerifyLocationTask.java:9: Warning: This field leaks a context object [StaticFieldLeak]
    private final MainActivity mainActivity;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:33: Warning: Do not place Android context classes in static fields (static reference to xLocationManager which has field context pointing to Context); this is a memory leak [StaticFieldLeak]
    private static xLocationManager instance;
            ~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/xLocationManager.java:37: Warning: Do not place Android context classes in static fields; this is a memory leak [StaticFieldLeak]
    private static Context xthis;
            ~~~~~~

   Explanation for issues of type "StaticFieldLeak":
   A static field will leak contexts.

   Non-static inner classes have an implicit reference to their outer class.
   If that outer class is for example a Fragment or Activity, then this
   reference means that the long-running handler/loader/task will hold a
   reference to the activity which prevents it from getting garbage
   collected.

   Similarly, direct field references to activities and fragments from these
   longer running instances can cause leaks.

   ViewModel classes should never point to Views or non-application Contexts.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/overlay_layout.xml:2: Warning: The resource R.layout.overlay_layout appears to be unused [UnusedResources]
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
^

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/gnssmain.xml:6: Warning: This ScrollView layout or its RelativeLayout parent is unnecessary [UselessParent]
    <ScrollView
     ~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:29: Warning: This ScrollView layout or its LinearLayout parent is unnecessary [UselessParent]
    <ScrollView
     ~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:55: Warning: This LinearLayout layout or its LinearLayout parent is possibly unnecessary [UselessParent]
  <LinearLayout
   ~~~~~~~~~~~~

   Explanation for issues of type "UselessParent":
   A layout with children that has no siblings, is not a scrollview or a root
   layout, and does not have a background, can be removed and have its
   children moved directly into the parent for a flatter and more efficient
   layout hierarchy.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable/fundo.png: Warning: Found bitmap drawable res/drawable/fundo.png in densityless folder [IconLocation]

   Explanation for issues of type "IconLocation":
   The res/drawable folder is intended for density-independent graphics such
   as shapes defined in XML. For bitmaps, move it to drawable-mdpi and
   consider providing higher and lower resolution versions in drawable-ldpi,
   drawable-hdpi and drawable-xhdpi. If the icon really is density independent
   (for example a solid color) you can place it in drawable-nodpi.

   https://developer.android.com/guide/practices/screens_support.html

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/drawable/ico.png: Warning: The following unrelated icon files have identical contents: ico.png, ico.png, ico.png, ico.png, fundo.png, ico.png [IconDuplicates]

   Explanation for issues of type "IconDuplicates":
   If an icon is repeated under different names, you can consolidate and just
   use one of the icons and delete the others to make your application
   smaller. However, duplicated icons usually are not intentional and can
   sometimes point to icons that were accidentally overwritten or accidentally
   not updated.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:34: Warning: This text field does not specify an inputType [TextFields]
        <EditText
         ~~~~~~~~

   Explanation for issues of type "TextFields":
   Providing an inputType attribute on a text field improves usability because
   depending on the data to be input, optimized keyboards can be shown to the
   user (such as just digits and parentheses for a phone number). 

   The lint detector also looks at the id of the view, and if the id offers a
   hint of the purpose of the field (for example, the id contains the phrase
   phone or email), then lint will also ensure that the inputType contains the
   corresponding type attributes.

   If you really want to keep the text field generic, you can suppress this
   warning by setting inputType="text".

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:34: Warning: Missing autofillHints attribute [Autofill]
        <EditText
         ~~~~~~~~

   Explanation for issues of type "Autofill":
   Specify an autofillHints attribute when targeting SDK version 26 or higher
   or explicitly specify that the view is not important for autofill. Your app
   can help an autofill service classify the data correctly by providing the
   meaning of each view that could be autofillable, such as views representing
   usernames, passwords, credit card fields, email addresses, etc.

   The hints can have any value, but it is recommended to use predefined
   values like 'username' for a username or 'creditCardNumber' for a credit
   card number. For a list of all predefined autofill hint constants, see the
   AUTOFILL_HINT_ constants in the View reference at
   https://developer.android.com/reference/android/view/View.html.

   You can mark a view unimportant for autofill by specifying an
   importantForAutofill attribute on that view or a parent view. See
   https://developer.android.com/reference/android/view/View.html#setImportant
   ForAutofill(int).

   https://developer.android.com/guide/topics/text/autofill.html

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/build.gradle:88: Information: Add suffix -ktx to enable the Kotlin extensions for this library [KtxExtensionAvailable]
    implementation 'androidx.core:core:1.12.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "KtxExtensionAvailable":
   Android KTX extensions augment some libraries with support for modern
   Kotlin language features like extension functions, extension properties,
   lambdas, named parameters, coroutines, and more.

   In Kotlin projects, use the KTX version of a library by replacing the
   dependency in your build.gradle file. For example, you can replace
   androidx.fragment:fragment with androidx.fragment:fragment-ktx.

   https://developer.android.com/kotlin/ktx

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:7: Warning: Missing contentDescription attribute on image [ContentDescription]
 <ImageView
  ~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, set their descriptions to
   @null. If your app's minSdkVersion is 16 or higher, you can instead set
   these graphical elements' android:importantForAccessibility attributes to
   no.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:34: Warning: Missing accessibility label: provide either a view with an android:labelFor that references this view or provide an android:hint [LabelFor]
        <EditText
         ~~~~~~~~

   Explanation for issues of type "LabelFor":
   Editable text fields should provide an android:hint or, provided your
   minSdkVersion is at least 17, they may be referenced by a view with a
   android:labelFor attribute.

   When using android:labelFor, be sure to provide an android:text or an
   android:contentDescription.

   If your view is labeled but by a label in a different layout which includes
   this one, just suppress this warning from lint.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/MainActivity.java:1523: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
   textViewTempo.setText("🏁 00:00:00");
                         ~~~~~~~~~~~~~

   Explanation for issues of type "SetTextI18n":
   When calling TextView#setText
   * Never call Number#toString() to format numbers; it will not handle
   fraction separators and locale-specific digits properly. Consider using
   String#format with proper format specifications (%d or %f) instead.
   * Do not pass a string literal (e.g. "Hello") to display text. Hardcoded
   text can not be properly translated to other languages. Consider using
   Android resource strings instead.
   * Do not build messages by concatenating text chunks. Such messages can not
   be properly translated.

   https://developer.android.com/guide/topics/resources/localization.html

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:68: Warning: Hardcoded string "bear", should use @string resource [HardcodedText]
    android:text="bear"
    ~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:80: Warning: Hardcoded string "cell", should use @string resource [HardcodedText]
                                android:text="cell"
                                ~~~~~~~~~~~~~~~~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/main.xml:111: Warning: Hardcoded string "🏁 00:00:00", should use @string resource [HardcodedText]
                                android:text="🏁 00:00:00"
                                ~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/java/com/carlex/drive/OverlayService.java:40: Warning: Use "Gravity.START" instead of "Gravity.LEFT" to ensure correct behavior in right-to-left locales [RtlHardcoded]
        params.gravity = Gravity.TOP | Gravity.LEFT;
                                               ~~~~
/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/res/layout/overlay_layout.xml:10: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="5.0dp" to better support right-to-left layouts [RtlHardcoded]
 android:layout_marginLeft="5.0dp"  
 ~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "RtlHardcoded":
   Using Gravity#LEFT and Gravity#RIGHT can lead to problems when a layout is
   rendered in locales where text flows from right to left. Use Gravity#START
   and Gravity#END instead. Similarly, in XML gravity and layout_gravity
   attributes, use start rather than left.

   For XML attributes such as paddingLeft and layout_marginLeft, use
   paddingStart and layout_marginStart. NOTE: If your minSdkVersion is less
   than 17, you should add both the older left/right attributes as well as the
   new start/end attributes. On older platforms, where RTL is not supported
   and the start/end attributes are unknown and therefore ignored, you need
   the older left/right attributes. There is a separate lint check which
   catches that type of error.

   (Note: For Gravity#LEFT and Gravity#START, you can use these constants even
   when targeting older platforms, because the start bitmask is a superset of
   the left bitmask. Therefore, you can use gravity="start" rather than
   gravity="left|start".)

/data/data/com.termux/files/home/sdcard/TERMUX/66FakeGPS/app/src/main/AndroidManifest.xml: Warning: The project references RTL attributes, but does not explicitly enable or disable RTL support with android:supportsRtl in the manifest [RtlEnabled]

   Explanation for issues of type "RtlEnabled":
   To enable right-to-left support, when running on API 17 and higher, you
   must set the android:supportsRtl attribute in the manifest <application>
   element.

   If you have started adding RTL attributes, but have not yet finished the
   migration, you can set the attribute to false to satisfy this lint check.

21 errors, 88 warnings (40 warnings filtered by baseline lint-baseline.xml)
