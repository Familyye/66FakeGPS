package com.carlex.drive;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import android.location.GpsSatellite;
import android.location.GpsStatus;
import android.location.Location;
import android.os.Message;
import android.util.Log;

import de.robv.android.xposed.IXposedHookZygoteInit;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;
import de.robv.android.xposed.XC_MethodHook;

public class GPS {


    private long lastLocationTime = 0;

    public static void initZygote(final IXposedHookZygoteInit.StartupParam startupParam) throws Throwable {
        // hook nothing globally
    }

    public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
        // hook LocationManager of relevant packages
        initHookListenerTransport(lpparam);
        initHookGetLastKnownLocation(lpparam);
        initHookFusedLocation(lpparam);
    }

    //inicioListner
    void initHookListenerTransport(final XC_LoadPackage.LoadPackageParam lpparam) {
        class ListenerTransportHook extends XC_MethodHook {
            // this hooks an internal method of LocationManager, which calls OnLocationChanged and other callbacks

            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                /*if (param.hasThrowable()) {
                    return;
                }
                if (!Main.connectAndRun()) {
                    return;
                }*/

                Message message = (Message) param.args[0];
                if (message.what == 1) { // TYPE_LOCATION_CHANGED
                    // see: https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/location/java/android/location/LocationManager.java

                    Location realLocation = (Location) message.obj;

                    if (realLocation != null) {
                        // update location noise
                        long locationTime = realLocation.getTime();
                        if (locationTime != lastLocationTime) {
			    Log.d("Gps",  locationTime + " ListenerTransport updating location " + locationTime + " last " + lastLocationTime);
                            // only when real GPS location was updated
                            Main.updateLocation(locationTime);
                            lastLocationTime = locationTime;
                        }

                        // overwrite real location
                        message.obj = fusedLoc();
                        param.args[0] = message;

                        Location mojl = (Location) message.obj;
                        log("GPS", locationTime + " ListenerTransport Location faked(" + mojl.getTime() + ") " + mojl);
                    }
                } else {
                    Log.d("GPS", "ListenerTransport unhandled message(" + message.what + ") " + message.obj);
                }
            }
        }

        XposedHelpers.findAndHookMethod("android.location.LocationManager$ListenerTransport", lpparam.classLoader, "_handleMessage", Message.class, new ListenerTransportHook());
    }
    
    //lastlocation
    void initHookGetLastKnownLocation(final XC_LoadPackage.LoadPackageParam lpparam) {
        class LastKnownLocationHook extends XC_MethodHook {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                /*if (param.hasThrowable()) {
                    return;
                }
                if (!Main.connectAndRun()) {
                    return;
                }*/

                if (param.getResult() != null) { // provider enabled + location returned
                    Location location = gpsLoc();
                    param.setResult(location);

                    Log.d("GPS", "getLastKnownLocation Location faked: " + location);
                }
            }
        }

        XposedHelpers.findAndHookMethod("android.location.LocationManager", lpparam.classLoader, "getLastKnownLocation", String.class, new LastKnownLocationHook());
    }



    //inicio fused
    void initHookFusedLocation(final XC_LoadPackage.LoadPackageParam lpparam) {
        // hook for com.google.android.gms.location.LocationListener
        class onLocationChangedFusedHook extends XC_MethodHook {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                /*if (param.hasThrowable()) {
                    return;
                }
                if (!Main.connectAndRun()) {
                    return;
                }*/

                if (param.args[0] != null) {
                    Location location = fusedLoc();
                    param.args[0] = location;
		    Log.d("GPS", "onLocationChangedFusedHook Location faked: " + location);
                }
            }
        }

        // hook for com.google.android.gms.location.LocationCallback
        class onLocationResultFusedHook extends XC_MethodHook {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                /*if (param.hasThrowable()) {
                    return;
                }
                if (!Main.connectAndRun()) {
                    return;
                }*/

                Log.d("GPS", "onLocationResultFusedHook called");

                if (param.args[0] != null) {
                    Object locationResult = param.args[0];

                    // get real location list from members of LocationResult
                    /*List<Location> llObject = new ArrayList<>();
                    Field locationList = XposedHelpers.findFirstFieldByExactType(locationResult.getClass(), llObject.getClass());
                    locationList.setAccessible(true);
                    locationList.get(llObject);
                    Log.d("GPS", "onLocationResultFusedHook");
                    if (llObject.size() > 0) {*/
                        // get data from newest locatioin
                        Location location = fusedLoc();

                        // build own list
                        List<Location> llMy = new ArrayList<>();
                        llMy.add(location);

			location = gpsLoc();
			llMy.add(location);

			location = netLoc();                                                  llMy.add(location);


                        // overwrite original list
                        locationList.set(llObject, llMy);

                        Log.d("GPS", "onLocationResultFusedHook real list replaced");
                    /*} else {
                        Log.d("GPS", "onLocationResultFusedHook real list was empty");
                    }*/
                }
            }
        }

        // hook for com.google.android.gms.location.LocationServices
        class requestLocationUpdatesFusedHook extends XC_MethodHook {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                /*if (param.hasThrowable()) {
                    return;
                }
                if (!Main.connectAndRun()) {
                    return;
                }*/

                // parse args ... maybe fake them later
                for (Object arg: param.args) {
                    if (arg == null) {
                        continue;
                    }

                    String cname = arg.getClass().getName();
                    Log.d("GPS", "FusedLocationApi.requestLocationUpdates arg: " + cname + " -> " + arg);
                    if (!cname.startsWith("com.google.android.gms.internal") && !cname.equals("com.google.android.gms.location.LocationRequest") && !cname.equals("android.os.Looper")) {
                        hookLocationListener(arg.getClass());
                        hookLocationCallback(arg.getClass());
                    }
                }
            }

            void hookLocationListener(Class<?> ll) {
                Set<Unhook> unhooks = XposedBridge.hookAllMethods(ll, "onLocationChanged", new onLocationChangedFusedHook());
                if (unhooks.size() > 0) {
                    Log.d("GPS", "hooked onLocationChanged");
                }
            }

            void hookLocationCallback(Class<?> lc) {
                Set<Unhook> unhooks = XposedBridge.hookAllMethods(lc, "onLocationResult", new onLocationResultFusedHook());
                if (unhooks.size() > 0) {
                    Log.d("GPS", "hooked onLocationResult");
                }
            }
        }

        // https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi.html
        // getLastLocation(com.google.android.gms.common.api.GoogleApiClient)
        class getLastLocationFusedHook extends XC_MethodHook {
            @Override
            protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                /*if (param.hasThrowable()) {
                    return;
                }
                if (!Main.connectAndRun()) {
                    return;
                }*/

                if (param.getResult() != null) {
                    Location location = fusedLoc();
                    param.setResult(location);
                    Log.d("GPS", "getLastLocationFusedHook Location faked: " + location);
                }
            }
        }

        Class<?> clazz = XposedHelpers.findClassIfExists(
                "com.google.android.gms.location.LocationServices", lpparam.classLoader);
        if (clazz != null) {
            Log.d("GPS", "LocationServices found, hooking FusedLocationApi");
            // get FusedLocationProviderApi implementation
            Object fla = XposedHelpers.getStaticObjectField(clazz, "FusedLocationApi");

            // hook all versions of requestLocationUpdates
            XposedBridge.hookAllMethods(fla.getClass(), "requestLocationUpdates", new requestLocationUpdatesFusedHook());

            // hook getLastLocation
            XposedBridge.hookAllMethods(fla.getClass(), "getLastLocation", new getLastLocationFusedHook());
        } else {
            Log.d("GPS", "LocationServices not found, don't need to hook FusedLocationApi");
        }
    }


    private Location fusedLoc(){
	    Class<?> clazz = Class.forName("com.carlex.drive.FakeLocationService1");                           
	    Field field = clazz.getField("fusedlocation");
	    Location location = (Location) field.get(null);
	    return location;
    }

    private Location gpsLoc(){              
	    Class<?> clazz = Class.forName("com.carlex.drive.FakeLocationService1");                                                                 
	    Field field = clazz.getField("gpslocation");    
	    Location location = (Location) field.get(null);    
	    return location;                     
    }

    private Location netLoc(){          
	    Class<?> clazz = Class.forName("com.carlex.drive.FakeLocationService1");                    
	    Field field = clazz.getField("netlocation");     
	    Location location = (Location) field.get(null);     
	    return location;                
    }


}
