package com.carlex.drive;
import org.json.JSONException;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;
import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;
import de.robv.android.xposed.XC_MethodHook;

public class Cellinfo implements IXposedHookLoadPackage {

    public static JSONObject getCellInfo(double lat, double lon) {
        try {
            // Chave de API do OpenCellID
            String apiKey = "pk.28294d46ef4d93a0404c0fbb562264f6";

            // Coordenada central (São Paulo)
            double centerLat = lat;
            double centerLon = lon;
            double radius = 0.009; // Aproximadamente 1 km

            // Calcule o BBOX
            double minLat = centerLat - radius;
            double maxLat = centerLat + radius;
            double minLon = centerLon - radius;
            double maxLon = centerLon + radius;

            // Construa a URL da API
            String url = "https://opencellid.org/cell/getInArea?key=" + apiKey +
                    "&BBOX=" + minLat + "," + minLon + "," + maxLat + "," + maxLon +
                    "&format=json&mcc=724&limit=1";

            // Crie uma conexão HTTP
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestMethod("GET");

            // Leitura da resposta da API
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            StringBuilder response = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            // Feche a conexão
            connection.disconnect();

            // Analise a resposta JSON e imprima a saída formatada
            JSONObject jsonResponse = new JSONObject(response.toString());
            if (jsonResponse.has("cells")) {
                JSONArray cells = jsonResponse.getJSONArray("cells");
                if (cells.length() > 0) {
                    JSONObject cell = cells.getJSONObject(0);
                    System.out.println("Cell ID: " + cell.getInt("cellid") +
                            " New cellid [LAC: " + cell.getInt("lac") +
                            ", MCC: " + cell.getInt("mcc") +
                            ", MNC: " + cell.getInt("mnc") +
                            ", Latitude: " + cell.getDouble("lat") +
                            ", Longitude: " + cell.getDouble("lon") +
                            ", Range: " + cell.getInt("range") +
                            ", Average Signal Strength: " + cell.getInt("averageSignalStrength") + "]");
                    return cell;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return null;
    }

    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
        hookCellInfo(lpparam);
    }

    private void hookCellInfo(XC_LoadPackage.LoadPackageParam lpparam) {
        XposedHelpers.findAndHookMethod("android.telephony.TelephonyManager", lpparam.classLoader, "getAllCellInfo",
                new XC_MethodHook() {
                    @Override
                    protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                        List<Object> cellInfoList = (List<Object>) param.getResult();
                        if (cellInfoList != null && !cellInfoList.isEmpty()) {
                            for (Object cellInfo : cellInfoList) {
                                if (cellInfo.getClass().getName().equals("android.telephony.CellInfoLte")) {
                                    injectCellInfoLte(cellInfo);
                                } else if (cellInfo.getClass().getName().equals("android.telephony.CellInfoWcdma")) {
                                    injectCellInfoWcdma(cellInfo);
                                } else if (cellInfo.getClass().getName().equals("android.telephony.CellInfoGsm")) {
                                    injectCellInfoGsm(cellInfo);
                                }
                            }
                        }
                    }
                });
    }

    private void injectCellInfoLte(Object cellInfo) {
        // Obtenha os dados de localização simulados
        JSONObject cellData = getCellInfo(-23.550520, -46.633308); // São Paulo coordenadas
        if (cellData != null) {
            // Injetar dados no CellInfoLte
	    try{
            XposedHelpers.setIntField(cellInfo, "mCi", cellData.getInt("cellid"));
            XposedHelpers.setIntField(cellInfo, "mTac", cellData.getInt("lac"));
            XposedHelpers.setIntField(cellInfo, "mMcc", cellData.getInt("mcc"));
            XposedHelpers.setIntField(cellInfo, "mMnc", cellData.getInt("mnc"));
            XposedHelpers.setIntField(cellInfo, "mRssi", cellData.getInt("averageSignalStrength"));
	    } catch (JSONException e) {
    // lidar com a exceção aqui, por exemplo, imprimir uma mensagem de erro
    e.printStackTrace();
}
        }
    }

    private void injectCellInfoWcdma(Object cellInfo) {
        // Obtenha os dados de localização simulados
        JSONObject cellData = getCellInfo(-23.550520, -46.633308); // São Paulo coordenadas
        if (cellData != null) {
            // Injetar dados no CellInfoWcdma
	    try{
            XposedHelpers.setIntField(cellInfo, "mCid", cellData.getInt("cellid"));
            XposedHelpers.setIntField(cellInfo, "mLac", cellData.getInt("lac"));
            XposedHelpers.setIntField(cellInfo, "mMcc", cellData.getInt("mcc"));
            XposedHelpers.setIntField(cellInfo, "mMnc", cellData.getInt("mnc"));
            XposedHelpers.setIntField(cellInfo, "mSignalStrength", cellData.getInt("averageSignalStrength"));
	    } catch (JSONException e) {
    // lidar com a exceção aqui, por exemplo, imprimir uma mensagem de erro
    e.printStackTrace();
}
        }
    }

    private void injectCellInfoGsm(Object cellInfo) {
        // Obtenha os dados de localização simulados
        JSONObject cellData = getCellInfo(-23.550520, -46.633308); // São Paulo coordenadas
        if (cellData != null) {
            // Injetar dados no CellInfoGsm
	    try{
            XposedHelpers.setIntField(cellInfo, "mCid", cellData.getInt("cellid"));
            XposedHelpers.setIntField(cellInfo, "mLac", cellData.getInt("lac"));
            XposedHelpers.setIntField(cellInfo, "mMcc", cellData.getInt("mcc"));
            XposedHelpers.setIntField(cellInfo, "mMnc", cellData.getInt("mnc"));
            XposedHelpers.setIntField(cellInfo, "mSignalStrength", cellData.getInt("averageSignalStrength"));
	    } catch (JSONException e) {
    // lidar com a exceção aqui, por exemplo, imprimir uma mensagem de erro
    e.printStackTrace();
}
        }
    }
}

